{"version":3,"file":"main.a5a877b8.iframe.bundle.js","mappings":";;AA0CA;AACA;;AAIA","sources":["webpack://@zendeskgarden/css-components/./.storybook/preview.js"],"sourcesContent":["/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport '@zendeskgarden/css-grid';\nimport '@zendeskgarden/css-utilities';\nimport './index.css';\nimport { DEFAULT_THEME, ThemeProvider, getColor } from '@zendeskgarden/react-theming';\nimport React from 'react';\nimport { create } from '@storybook/theming/create';\nimport { createGlobalStyle } from 'styled-components';\n\nconst DARK_THEME = { ...DEFAULT_THEME, colors: { ...DEFAULT_THEME.colors, base: 'dark' } };\nconst DARK = getColor({ theme: DARK_THEME, variable: 'background.default' });\nconst LIGHT = getColor({ theme: DEFAULT_THEME, variable: 'background.default' });\n\nexport const parameters = {\n  backgrounds: {\n    grid: { disable: true },\n    values: [\n      { name: 'light', value: LIGHT },\n      { name: 'dark', value: DARK }\n    ]\n  },\n  controls: { hideNoControlsWarning: true },\n  docs: {\n    theme: create({\n      base: DEFAULT_THEME.colors.base\n    })\n  },\n  options: {\n    storySort: {\n      order: ['README']\n    }\n  }\n};\n\nconst GlobalPreviewStyling = createGlobalStyle`\n  html {\n    background-color: ${p => getColor({ theme: p.theme, variable: 'background.default' })};\n    color: ${p => getColor({ theme: p.theme, variable: 'foreground.default' })};\n  }\n`;\n\nexport const decorators = [\n  (story, context) => {\n    const rtl = context.globals.locale === 'rtl';\n\n    if (context.globals.bedrock === 'enabled') {\n      document.querySelector('link[href=\"index.css\"]').removeAttribute('disabled');\n    } else {\n      document.querySelector('link[href=\"index.css\"]').setAttribute('disabled', true);\n    }\n\n    const colors = {\n      ...DEFAULT_THEME.colors,\n      primaryHue: context.globals.primaryHue,\n      variables: {\n        ...DEFAULT_THEME.colors.variables,\n        dark: context.args['colors.dark'],\n        light: context.args['colors.light']\n      }\n    };\n\n    if (\n      context.globals.backgrounds && context.globals.backgrounds.value !== 'transparent'\n        ? context.globals.backgrounds.value === DARK\n        : context.parameters.backgrounds.default === 'dark'\n    ) {\n      colors.base = 'dark';\n    }\n\n    const theme = { ...DEFAULT_THEME, colors, rtl };\n\n    return (\n      <ThemeProvider theme={theme}>\n        <GlobalPreviewStyling />\n        {story()}\n      </ThemeProvider>\n    );\n  }\n];\n\nexport const globalTypes = {\n  locale: {\n    name: 'direction',\n    description: 'Locale direction',\n    defaultValue: 'ltr',\n    toolbar: {\n      icon: 'globe',\n      items: [\n        { value: 'ltr', title: 'LTR' },\n        { value: 'rtl', title: 'RTL' }\n      ]\n    }\n  },\n  bedrock: {\n    name: 'bedrock',\n    description: 'CSS Bedrock',\n    defaultValue: 'enabled',\n    toolbar: {\n      icon: 'link',\n      items: [\n        { value: 'enabled', title: 'Bedrock enabled' },\n        { value: 'disabled', title: 'Bedrock disabled' }\n      ]\n    }\n  }\n};\n"],"names":[],"sourceRoot":""}